/*
EXAMPLE JSON OBJECT TO SEND IN AJAX (I think)

ajax(
{
  url: 'http://10.33.80.112:3000', // Translator URL
  method: 'post',
  type: 'json',
  async: false,
  headers: {
    // Note, Base64.encode comes from `https://github.com/pastukhov/pebticz/blob/master/src/app.js`
    Authorization: "Basic " + Base64.encode(Settings.option('Login') + ":" + Settings.option('password')),
  },
  data: {
    // MyAnimeList data
    episode: 11,
    status: 1,
    score: 7,
    downloaded_episodes: '',
    storage_type: '',
    storage_values: '',
    times_rewatched: '',
    rewatch_value: '',
    date_start: '',
    date_finish: '',
    priority: '',
    enable_discussion: '',
    enable_rewatching: '',
    comments: '',
    fansub_group: '',
    tags: '',

    // Translator data
    destination: 'http://myanimelist.net/api/animelist/add/21.xml'
  }
}
*/


/* ------ REQUIRE LIBRARIES -------- */

var UI = require('ui');
var Vector2 = require('vector2');
var ajax = require('ajax');
var Settings = require('settings'); //Caitlin

/* ------ Test --------------------- */

var Base64 = {
    // private property
    _keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    // public method for encoding
    encode : function (input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
        input = Base64._utf8_encode(input);
        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
        }
        return output;
    },
    // public method for decoding
    decode : function (input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        while (i < input.length) {
            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }
        }
        output = Base64._utf8_decode(output);
        return output;
    },
    // private method for UTF-8 encoding
    _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,"\n");
        var utftext = "";
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    },
    // private method for UTF-8 decoding
    _utf8_decode : function (utftext) {
        var string = "";
        var i = 0;
        var c = 0;
//        var c1 = 0;
        var c2 = 0;
        var c3 = 0;
        while ( i < utftext.length ) {
            c = utftext.charCodeAt(i);
            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i+1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i+1);
                c3 = utftext.charCodeAt(i+2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }
        }
        return string;
    }
};

ajax(
{
  url: 'http://10.33.80.112:3000', // Translator URL
  method: 'post',
  type: 'json',
  async: false,
  headers: {
    // Note, Base64.encode comes from `https://github.com/pastukhov/pebticz/blob/master/src/app.js`
    Authorization: "Basic " + Base64.encode(Settings.option('Login') + ":" + Settings.option('password')),
  },
  data: {
    // MyAnimeList data
    episode: 11,
    status: 1,
    score: 7,
    downloaded_episodes: '',
    storage_type: '',
    storage_values: '',
    times_rewatched: '',
    rewatch_value: '',
    date_start: '',
    date_finish: '',
    priority: '',
    enable_discussion: '',
    enable_rewatching: '',
    comments: '',
    fansub_group: '',
    tags: '',

    // Translator data
    destination: 'http://myanimelist.net/api/animelist/add/21.xml'
  }
}
);

/* ------ ANIME LIST CODE -------- */

function formatAnimes(animeList) {
  var formatted_animes = [];

  var i;
  for (i = 0; i < animeList.length; i++) {
    console.log('iteration: ' + i);

    formatted_animes[i] = {
      title: 'placeholder #' + i,
      icon: 'images/menu_icon.png',
      subtitle: 'description #' + i
    };
  }
  return formatted_animes;
}

function getAnimes() {
  // AJAX CALL IN THIS FUNCTION
  return formatAnimes([{
    title: 'test 1',
    icon: 'images/menu_icon.png',
    subtitle: 'Brief description'
  }, {
    title: 'test 2',
    icon: 'images/menu_icon.png',
    subtitle: 'Another description'
  }]);
}

function buildAnimeList() {
  return new UI.Menu({
    sections: [{
      items: getAnimes()
    }]
  });
}

/* ------ EPISODE LIST CODE -------- */

function formatEpisodes(episodeList) {
  var formatted_episodes = [];

  var i;
  for (i = 0; i < episodeList.length; i++) {
    console.log('iteration: ' + i);

    formatted_episodes[i] = {
      title: 'placeholder #' + i,
      icon: 'images/menu_icon.png',
      subtitle: 'description #' + i
    };
  }
  return formatted_episodes;
}

function getEpisodes(index) {
  // AJAX CALL IN THIS FUNCTION
  return formatEpisodes([]);
}

function buildEpisodeList(index) {
  return new UI.Menu({
    sections: [{
      items: getEpisodes(index)
    }]
  });
}

/* ----- WATCHING STATUS OPTIONS -----*/

function getWatchingStatus(){
  return [{
    title: '+',
    icon: 'images/menue_icon.png',
    subtitle: 'increments progress'
  } ,{
    title: '-',
    icon: 'images/menue_icon.png',
    subtitle: 'decrements progress'
  } ,{
    title: 'Progress',
    icon: 'images/menue_icon.png',
    subtitle: 'epsWatched/totEps'
  }, {
    title: 'Rating',
    icon: 'images/menue_icon.png',
    subtitle: 'current rating'
  }, {
    title: 'Remove',
    icon: 'images/menue_icon.png'
  }];
}

/* ------ STATUS OPTIONS ------ */

function statusOptions(){
  return new UI.Menu({
    sections: [{
      items: getWatchingStatus()
    }]
  }); 
}

/* ------ MAIN CODE -------- */

var main = buildAnimeList();
main.show();

main.on('select', function(e) {
  console.log('selected: ' + e.itemIndex);
  var epList = statusOptions();
  // var epList = buildEpisodeList(e.itemIndex);
  epList.show();
});
